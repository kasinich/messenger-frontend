{"ast":null,"code":"import _asyncToGenerator from \"D:/React/projects/02-second-project/messanger-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { withFormik } from \"formik\";\nimport LoginForm from \"../components/LoginForm\";\nimport validateForm from \"utils/validate\";\nimport { userActions } from \"../../../redux/actions\";\nimport store from \"../../../redux/store\";\nconst LoginFormContainer = withFormik({\n  mapPropsToValues: () => ({\n    email: \"\",\n    password: \"\"\n  }),\n  validate: values => {\n    let errors = {};\n    validateForm({\n      isAuth: true,\n      values,\n      errors\n    });\n    return errors;\n  },\n  handleSubmit: function () {\n    var _ref = _asyncToGenerator(function* (values, {\n      setSubmitting,\n      props\n    }) {\n      try {\n        const response = yield store.dispatch(userActions.fetchUserLogin(values));\n        if (response && response.status === \"success\") {\n          props.history.replace(\"/\");\n        }\n      } catch (error) {\n        console.error(\"Error during registration:\", error);\n      } finally {\n        setSubmitting(false);\n      }\n    });\n    return function handleSubmit(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }(),\n  displayName: \"LoginForm\"\n})(LoginForm);\nexport default LoginFormContainer;","map":{"version":3,"names":["withFormik","LoginForm","validateForm","userActions","store","LoginFormContainer","mapPropsToValues","email","password","validate","values","errors","isAuth","handleSubmit","_ref","_asyncToGenerator","setSubmitting","props","response","dispatch","fetchUserLogin","status","history","replace","error","console","_x","_x2","apply","arguments","displayName"],"sources":["D:/React/projects/02-second-project/messanger-frontend/src/modules/LoginForm/containers/LoginForm.js"],"sourcesContent":["import { withFormik } from \"formik\";\r\nimport LoginForm from \"../components/LoginForm\";\r\nimport validateForm from \"utils/validate\"\r\n\r\nimport { userActions } from \"../../../redux/actions\" \r\n\r\nimport store from \"../../../redux/store\"\r\n\r\nconst LoginFormContainer = withFormik({\r\n    mapPropsToValues: () => (\r\n        {\r\n            email: \"\",\r\n            password: \"\"\r\n        }),\r\n    validate: values => {\r\n        let errors = {}\r\n\r\n        validateForm({ isAuth: true, values, errors })\r\n\r\n        return errors\r\n    },\r\n    handleSubmit: async (values, { setSubmitting, props }) => {\r\n        try {\r\n            const response = await store.dispatch(userActions.fetchUserLogin(values));\r\n            if (response && response.status === \"success\") {\r\n                props.history.replace(\"/\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error during registration:\", error);\r\n        } finally {\r\n            setSubmitting(false);\r\n        }\r\n    },\r\n    displayName: \"LoginForm\"\r\n\r\n})(LoginForm);\r\n\r\nexport default LoginFormContainer"],"mappings":";AAAA,SAASA,UAAU,QAAQ,QAAQ;AACnC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,SAASC,WAAW,QAAQ,wBAAwB;AAEpD,OAAOC,KAAK,MAAM,sBAAsB;AAExC,MAAMC,kBAAkB,GAAGL,UAAU,CAAC;EAClCM,gBAAgB,EAAEA,CAAA,MACd;IACIC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACd,CAAC,CAAC;EACNC,QAAQ,EAAEC,MAAM,IAAI;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IAEfT,YAAY,CAAC;MAAEU,MAAM,EAAE,IAAI;MAAEF,MAAM;MAAEC;IAAO,CAAC,CAAC;IAE9C,OAAOA,MAAM;EACjB,CAAC;EACDE,YAAY;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAE,WAAOL,MAAM,EAAE;MAAEM,aAAa;MAAEC;IAAM,CAAC,EAAK;MACtD,IAAI;QACA,MAAMC,QAAQ,SAASd,KAAK,CAACe,QAAQ,CAAChB,WAAW,CAACiB,cAAc,CAACV,MAAM,CAAC,CAAC;QACzE,IAAIQ,QAAQ,IAAIA,QAAQ,CAACG,MAAM,KAAK,SAAS,EAAE;UAC3CJ,KAAK,CAACK,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;QAC9B;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACtD,CAAC,SAAS;QACNR,aAAa,CAAC,KAAK,CAAC;MACxB;IACJ,CAAC;IAAA,gBAAAH,aAAAa,EAAA,EAAAC,GAAA;MAAA,OAAAb,IAAA,CAAAc,KAAA,OAAAC,SAAA;IAAA;EAAA;EACDC,WAAW,EAAE;AAEjB,CAAC,CAAC,CAAC7B,SAAS,CAAC;AAEb,eAAeI,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}