{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\projects\\\\02-second-project\\\\messanger-frontend\\\\src\\\\containers\\\\Messages.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { Empty } from \"antd\";\nimport { messagesActions } from '../redux/actions';\nimport socket from \"core/socket\";\nimport { Messages as BaseMessages } from \"components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Messages = ({\n  currentDialogId,\n  fetchMessages,\n  addMessage,\n  items,\n  user,\n  isLoading,\n  removeMessageById\n}) => {\n  _s();\n  const messagesRef = useRef(null);\n  const [previewImage, setPreviewImage] = useState(\"\");\n  const onNewMessage = data => {\n    addMessage(data);\n  };\n  useEffect(() => {\n    if (currentDialogId) {\n      fetchMessages(currentDialogId);\n    }\n    socket.on(\"SERVER:NEW_MESSAGE\", onNewMessage);\n    return () => {\n      socket.removeListener(\"SERVER:NEW_MESSAGE\", onNewMessage);\n    };\n  }, [currentDialogId]);\n  useEffect(() => {\n    if (currentDialogId) {\n      messagesRef.current.scrollTo(0, 999999);\n    }\n  }, [items]);\n  if (!currentDialogId) {\n    return /*#__PURE__*/_jsxDEV(Empty, {\n      description: \"\\u041E\\u0442\\u043A\\u0440\\u043E\\u0439\\u0442\\u0435 \\u0434\\u0438\\u0430\\u043B\\u043E\\u0433\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(BaseMessages, {\n    user: user,\n    blockRef: messagesRef,\n    items: items,\n    isLoading: isLoading && !user,\n    onRemoveMessage: removeMessageById\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 12\n  }, this);\n};\n_s(Messages, \"QEcq4tn7LMjnsyoio+tmZavozgs=\");\n_c = Messages;\nexport default connect(({\n  dialogs,\n  messages,\n  user\n}) => ({\n  currentDialogId: dialogs.currentDialogId,\n  items: messages.items,\n  isLoading: messages.isLoading,\n  user: user.data\n}), messagesActions)(Messages);\nvar _c;\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["React","useEffect","useState","useRef","connect","Empty","messagesActions","socket","Messages","BaseMessages","jsxDEV","_jsxDEV","currentDialogId","fetchMessages","addMessage","items","user","isLoading","removeMessageById","_s","messagesRef","previewImage","setPreviewImage","onNewMessage","data","on","removeListener","current","scrollTo","description","fileName","_jsxFileName","lineNumber","columnNumber","blockRef","onRemoveMessage","_c","dialogs","messages","$RefreshReg$"],"sources":["D:/React/projects/02-second-project/messanger-frontend/src/containers/Messages.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Empty } from \"antd\"\r\n\r\nimport { messagesActions } from '../redux/actions';\r\nimport socket from \"core/socket\"\r\nimport { Messages as BaseMessages } from \"components\"\r\n\r\nconst Messages = ({ currentDialogId, fetchMessages, addMessage, items, user, isLoading, removeMessageById }) => {\r\n    const messagesRef = useRef(null)\r\n\r\n    const [previewImage, setPreviewImage] = useState(\"\")\r\n\r\n    const onNewMessage = (data) => {\r\n        addMessage(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (currentDialogId) {\r\n            fetchMessages(currentDialogId)\r\n        }\r\n        socket.on(\"SERVER:NEW_MESSAGE\", onNewMessage)\r\n\r\n        return () => {\r\n            socket.removeListener(\"SERVER:NEW_MESSAGE\", onNewMessage)\r\n        }\r\n    }, [currentDialogId])\r\n\r\n    useEffect(() => {\r\n        if (currentDialogId) {\r\n            messagesRef.current.scrollTo(0, 999999)\r\n        }\r\n    }, [items])\r\n\r\n    if (!currentDialogId) {\r\n        return <Empty description=\"Откройте диалог\" />\r\n    }\r\n\r\n    return <BaseMessages\r\n        user={user}\r\n        blockRef={messagesRef}\r\n        items={items}\r\n        isLoading={isLoading && !user}\r\n        onRemoveMessage={removeMessageById}\r\n    ></BaseMessages>\r\n};\r\n\r\nexport default connect(({ dialogs, messages, user }) => ({\r\n    currentDialogId: dialogs.currentDialogId,\r\n    items: messages.items,\r\n    isLoading: messages.isLoading,\r\n    user: user.data\r\n}),\r\n    messagesActions\r\n)(Messages)"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,KAAK,QAAQ,MAAM;AAE5B,SAASC,eAAe,QAAQ,kBAAkB;AAClD,OAAOC,MAAM,MAAM,aAAa;AAChC,SAASC,QAAQ,IAAIC,YAAY,QAAQ,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMH,QAAQ,GAAGA,CAAC;EAAEI,eAAe;EAAEC,aAAa;EAAEC,UAAU;EAAEC,KAAK;EAAEC,IAAI;EAAEC,SAAS;EAAEC;AAAkB,CAAC,KAAK;EAAAC,EAAA;EAC5G,MAAMC,WAAW,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAEhC,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMqB,YAAY,GAAIC,IAAI,IAAK;IAC3BV,UAAU,CAACU,IAAI,CAAC;EACpB,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACZ,IAAIW,eAAe,EAAE;MACjBC,aAAa,CAACD,eAAe,CAAC;IAClC;IACAL,MAAM,CAACkB,EAAE,CAAC,oBAAoB,EAAEF,YAAY,CAAC;IAE7C,OAAO,MAAM;MACThB,MAAM,CAACmB,cAAc,CAAC,oBAAoB,EAAEH,YAAY,CAAC;IAC7D,CAAC;EACL,CAAC,EAAE,CAACX,eAAe,CAAC,CAAC;EAErBX,SAAS,CAAC,MAAM;IACZ,IAAIW,eAAe,EAAE;MACjBQ,WAAW,CAACO,OAAO,CAACC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC;IAC3C;EACJ,CAAC,EAAE,CAACb,KAAK,CAAC,CAAC;EAEX,IAAI,CAACH,eAAe,EAAE;IAClB,oBAAOD,OAAA,CAACN,KAAK;MAACwB,WAAW,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAClD;EAEA,oBAAOtB,OAAA,CAACF,YAAY;IAChBO,IAAI,EAAEA,IAAK;IACXkB,QAAQ,EAAEd,WAAY;IACtBL,KAAK,EAAEA,KAAM;IACbE,SAAS,EAAEA,SAAS,IAAI,CAACD,IAAK;IAC9BmB,eAAe,EAAEjB;EAAkB;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AACpB,CAAC;AAACd,EAAA,CArCIX,QAAQ;AAAA4B,EAAA,GAAR5B,QAAQ;AAuCd,eAAeJ,OAAO,CAAC,CAAC;EAAEiC,OAAO;EAAEC,QAAQ;EAAEtB;AAAK,CAAC,MAAM;EACrDJ,eAAe,EAAEyB,OAAO,CAACzB,eAAe;EACxCG,KAAK,EAAEuB,QAAQ,CAACvB,KAAK;EACrBE,SAAS,EAAEqB,QAAQ,CAACrB,SAAS;EAC7BD,IAAI,EAAEA,IAAI,CAACQ;AACf,CAAC,CAAC,EACElB,eACJ,CAAC,CAACE,QAAQ,CAAC;AAAA,IAAA4B,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}