{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\projects\\\\02-second-project\\\\messanger-frontend\\\\src\\\\containers\\\\Dialogs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { dialogsActions, messagesActions } from '../redux/actions';\nimport socket from \"core/socket\";\nimport { Dialogs as BaseDialogs } from \"components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dialogs = ({\n  fetchDialogs,\n  currentDialogId,\n  items,\n  userId,\n  messages,\n  fetchMessages\n}) => {\n  _s();\n  const [inputValue, setInputValue] = useState(\"\");\n  const [filteredItems, setFilteredItems] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const onNewDialog = () => {\n    fetchDialogs();\n  };\n  const onChangeInput = value => {\n    setInputValue(value);\n  };\n  useEffect(() => {\n    fetchDialogs();\n    socket.on(\"SERVER:DIALOG_CREATED\", fetchDialogs);\n    socket.on(\"SERVER:NEW_MESSAGE\", fetchDialogs);\n    return () => {\n      socket.removeListener(\"SERVER:DIALOG_CREATED\", fetchDialogs);\n      socket.removeListener(\"SERVER:NEW_MESSAGE\", fetchDialogs);\n    };\n  }, []);\n  useEffect(() => {\n    const sortedItems = [...items].sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n    const filteredSortedItems = sortedItems.filter(dialog => dialog.author.fullname.toLowerCase().includes(inputValue.toLowerCase()) || dialog.partner.fullname.toLowerCase().includes(inputValue.toLowerCase()));\n    setFilteredItems(filteredSortedItems);\n\n    // Calculate unread messages count\n    const count = items.reduce((total, dialog) => {\n      return total + dialog.messages.items.reduce((unreadTotal, message) => {\n        return unreadTotal + (message.read ? 0 : 1);\n      }, 0);\n    }, 0);\n    setUnreadCount(count);\n  }, [inputValue, items]);\n  return /*#__PURE__*/_jsxDEV(BaseDialogs, {\n    userId: userId,\n    items: filteredItems,\n    inputValue: inputValue,\n    currentDialogId: currentDialogId,\n    onSearch: onChangeInput,\n    unreadCount: unreadCount\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(Dialogs, \"FJht2LYbCThUECgjQc0wNL0AeoM=\");\n_c = Dialogs;\nexport default connect(({\n  dialogs,\n  messages\n}) => ({\n  dialogs,\n  messages\n}), dialogsActions, messagesActions)(Dialogs);\nvar _c;\n$RefreshReg$(_c, \"Dialogs\");","map":{"version":3,"names":["React","useState","useEffect","connect","dialogsActions","messagesActions","socket","Dialogs","BaseDialogs","jsxDEV","_jsxDEV","fetchDialogs","currentDialogId","items","userId","messages","fetchMessages","_s","inputValue","setInputValue","filteredItems","setFilteredItems","unreadCount","setUnreadCount","onNewDialog","onChangeInput","value","on","removeListener","sortedItems","sort","a","b","Date","updatedAt","filteredSortedItems","filter","dialog","author","fullname","toLowerCase","includes","partner","count","reduce","total","unreadTotal","message","read","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","_c","dialogs","$RefreshReg$"],"sources":["D:/React/projects/02-second-project/messanger-frontend/src/containers/Dialogs.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { dialogsActions, messagesActions } from '../redux/actions';\r\nimport socket from \"core/socket\";\r\nimport { Dialogs as BaseDialogs } from \"components\";\r\n\r\nconst Dialogs = ({ fetchDialogs, currentDialogId, items, userId, messages, fetchMessages }) => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const [filteredItems, setFilteredItems] = useState([]);\r\n    const [unreadCount, setUnreadCount] = useState(0);\r\n\r\n    const onNewDialog = () => {\r\n        fetchDialogs();\r\n    };\r\n\r\n    const onChangeInput = (value) => {\r\n        setInputValue(value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchDialogs();\r\n\r\n        socket.on(\"SERVER:DIALOG_CREATED\", fetchDialogs);\r\n        socket.on(\"SERVER:NEW_MESSAGE\", fetchDialogs);\r\n\r\n        return () => {\r\n            socket.removeListener(\"SERVER:DIALOG_CREATED\", fetchDialogs);\r\n            socket.removeListener(\"SERVER:NEW_MESSAGE\", fetchDialogs);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const sortedItems = [...items].sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\r\n        const filteredSortedItems = sortedItems.filter(\r\n            dialog =>\r\n                dialog.author.fullname.toLowerCase().includes(inputValue.toLowerCase()) ||\r\n                dialog.partner.fullname.toLowerCase().includes(inputValue.toLowerCase())\r\n        );\r\n        setFilteredItems(filteredSortedItems);\r\n\r\n        // Calculate unread messages count\r\n        const count = items.reduce((total, dialog) => {\r\n            return total + dialog.messages.items.reduce((unreadTotal, message) => {\r\n                return unreadTotal + (message.read ? 0 : 1);\r\n            }, 0);\r\n        }, 0);\r\n        setUnreadCount(count);\r\n    }, [inputValue, items]);\r\n\r\n    return (\r\n        <BaseDialogs\r\n            userId={userId}\r\n            items={filteredItems}\r\n            inputValue={inputValue}\r\n            currentDialogId={currentDialogId}\r\n            onSearch={onChangeInput}\r\n            unreadCount={unreadCount}\r\n        />\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    ({ dialogs, messages }) => ({ dialogs, messages }),\r\n     dialogsActions, messagesActions \r\n)(Dialogs);\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,cAAc,EAAEC,eAAe,QAAQ,kBAAkB;AAClE,OAAOC,MAAM,MAAM,aAAa;AAChC,SAASC,OAAO,IAAIC,WAAW,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMH,OAAO,GAAGA,CAAC;EAAEI,YAAY;EAAEC,eAAe;EAAEC,KAAK;EAAEC,MAAM;EAAEC,QAAQ;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC3F,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACmB,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EAEjD,MAAMuB,WAAW,GAAGA,CAAA,KAAM;IACtBb,YAAY,CAAC,CAAC;EAClB,CAAC;EAED,MAAMc,aAAa,GAAIC,KAAK,IAAK;IAC7BP,aAAa,CAACO,KAAK,CAAC;EACxB,CAAC;EAEDxB,SAAS,CAAC,MAAM;IACZS,YAAY,CAAC,CAAC;IAEdL,MAAM,CAACqB,EAAE,CAAC,uBAAuB,EAAEhB,YAAY,CAAC;IAChDL,MAAM,CAACqB,EAAE,CAAC,oBAAoB,EAAEhB,YAAY,CAAC;IAE7C,OAAO,MAAM;MACTL,MAAM,CAACsB,cAAc,CAAC,uBAAuB,EAAEjB,YAAY,CAAC;MAC5DL,MAAM,CAACsB,cAAc,CAAC,oBAAoB,EAAEjB,YAAY,CAAC;IAC7D,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAENT,SAAS,CAAC,MAAM;IACZ,MAAM2B,WAAW,GAAG,CAAC,GAAGhB,KAAK,CAAC,CAACiB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,GAAG,IAAID,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC,CAAC;IAC5F,MAAMC,mBAAmB,GAAGN,WAAW,CAACO,MAAM,CAC1CC,MAAM,IACFA,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACvB,UAAU,CAACsB,WAAW,CAAC,CAAC,CAAC,IACvEH,MAAM,CAACK,OAAO,CAACH,QAAQ,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACvB,UAAU,CAACsB,WAAW,CAAC,CAAC,CAC/E,CAAC;IACDnB,gBAAgB,CAACc,mBAAmB,CAAC;;IAErC;IACA,MAAMQ,KAAK,GAAG9B,KAAK,CAAC+B,MAAM,CAAC,CAACC,KAAK,EAAER,MAAM,KAAK;MAC1C,OAAOQ,KAAK,GAAGR,MAAM,CAACtB,QAAQ,CAACF,KAAK,CAAC+B,MAAM,CAAC,CAACE,WAAW,EAAEC,OAAO,KAAK;QAClE,OAAOD,WAAW,IAAIC,OAAO,CAACC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;MAC/C,CAAC,EAAE,CAAC,CAAC;IACT,CAAC,EAAE,CAAC,CAAC;IACLzB,cAAc,CAACoB,KAAK,CAAC;EACzB,CAAC,EAAE,CAACzB,UAAU,EAAEL,KAAK,CAAC,CAAC;EAEvB,oBACIH,OAAA,CAACF,WAAW;IACRM,MAAM,EAAEA,MAAO;IACfD,KAAK,EAAEO,aAAc;IACrBF,UAAU,EAAEA,UAAW;IACvBN,eAAe,EAAEA,eAAgB;IACjCqC,QAAQ,EAAExB,aAAc;IACxBH,WAAW,EAAEA;EAAY;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEV,CAAC;AAACpC,EAAA,CArDIV,OAAO;AAAA+C,EAAA,GAAP/C,OAAO;AAuDb,eAAeJ,OAAO,CAClB,CAAC;EAAEoD,OAAO;EAAExC;AAAS,CAAC,MAAM;EAAEwC,OAAO;EAAExC;AAAS,CAAC,CAAC,EACjDX,cAAc,EAAEC,eACrB,CAAC,CAACE,OAAO,CAAC;AAAC,IAAA+C,EAAA;AAAAE,YAAA,CAAAF,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}