{"ast":null,"code":"import { withFormik } from \"formik\";\nimport LoginForm from \"../components/LoginForm\";\nimport validateForm from \"utils/validate\";\nimport { openNotification } from \"util/helpers\";\nimport { userActions } from \"../../../redux/actions\"; /* не получается \"redux/actions\", ругается на пакет redux */\n\nimport store from \"../../../redux/store\";\nconst LoginFormContainer = withFormik({\n  mapPropsToValues: () => ({\n    email: \"\",\n    password: \"\"\n  }),\n  validate: values => {\n    let errors = {};\n    validateForm({\n      isAuth: true,\n      values,\n      errors\n    });\n    return errors;\n  },\n  handleSubmit: async (values, {\n    setSubmitting,\n    props\n  }) => {\n    try {\n      const response = await store.dispatch(userActions.fetchUserLogin(values));\n      if (response && response.status === \"success\") {\n        setTimeout(() => {\n          props.history.replace(\"/\");\n        }, 150);\n      }\n    } catch (error) {\n      console.error(\"Error during registration:\", error);\n    } finally {\n      setSubmitting(false);\n    }\n  },\n  displayName: \"LoginForm\"\n})(LoginForm);\nexport default LoginFormContainer;","map":{"version":3,"names":["withFormik","LoginForm","validateForm","openNotification","userActions","store","LoginFormContainer","mapPropsToValues","email","password","validate","values","errors","isAuth","handleSubmit","setSubmitting","props","response","dispatch","fetchUserLogin","status","setTimeout","history","replace","error","console","displayName"],"sources":["D:/React/projects/02-second-project/messanger-frontend/src/modules/LoginForm/containers/LoginForm.js"],"sourcesContent":["import { withFormik } from \"formik\";\r\nimport LoginForm from \"../components/LoginForm\";\r\nimport validateForm from \"utils/validate\"\r\nimport { openNotification } from \"util/helpers\"\r\n\r\nimport { userActions } from \"../../../redux/actions\" /* не получается \"redux/actions\", ругается на пакет redux */\r\n\r\nimport store from \"../../../redux/store\"\r\n\r\n\r\nconst LoginFormContainer = withFormik({\r\n    mapPropsToValues: () => (\r\n        {\r\n            email: \"\",\r\n            password: \"\"\r\n        }),\r\n    validate: values => {\r\n        let errors = {}\r\n\r\n        validateForm({ isAuth: true, values, errors })\r\n\r\n        return errors\r\n    },\r\n    handleSubmit: async (values, { setSubmitting, props }) => {\r\n        try {\r\n            const response = await store.dispatch(userActions.fetchUserLogin(values));\r\n            if (response && response.status === \"success\") {\r\n                setTimeout(() => {\r\n                    props.history.replace(\"/\");\r\n                }, 150);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error during registration:\", error);\r\n        } finally {\r\n            setSubmitting(false);\r\n        }\r\n    },\r\n    displayName: \"LoginForm\"\r\n\r\n})(LoginForm);\r\n\r\nexport default LoginFormContainer"],"mappings":"AAAA,SAASA,UAAU,QAAQ,QAAQ;AACnC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAASC,gBAAgB,QAAQ,cAAc;AAE/C,SAASC,WAAW,QAAQ,wBAAwB,EAAC;;AAErD,OAAOC,KAAK,MAAM,sBAAsB;AAGxC,MAAMC,kBAAkB,GAAGN,UAAU,CAAC;EAClCO,gBAAgB,EAAEA,CAAA,MACd;IACIC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACd,CAAC,CAAC;EACNC,QAAQ,EAAEC,MAAM,IAAI;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IAEfV,YAAY,CAAC;MAAEW,MAAM,EAAE,IAAI;MAAEF,MAAM;MAAEC;IAAO,CAAC,CAAC;IAE9C,OAAOA,MAAM;EACjB,CAAC;EACDE,YAAY,EAAE,MAAAA,CAAOH,MAAM,EAAE;IAAEI,aAAa;IAAEC;EAAM,CAAC,KAAK;IACtD,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,QAAQ,CAACd,WAAW,CAACe,cAAc,CAACR,MAAM,CAAC,CAAC;MACzE,IAAIM,QAAQ,IAAIA,QAAQ,CAACG,MAAM,KAAK,SAAS,EAAE;QAC3CC,UAAU,CAAC,MAAM;UACbL,KAAK,CAACM,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;QAC9B,CAAC,EAAE,GAAG,CAAC;MACX;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACtD,CAAC,SAAS;MACNT,aAAa,CAAC,KAAK,CAAC;IACxB;EACJ,CAAC;EACDW,WAAW,EAAE;AAEjB,CAAC,CAAC,CAACzB,SAAS,CAAC;AAEb,eAAeK,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}