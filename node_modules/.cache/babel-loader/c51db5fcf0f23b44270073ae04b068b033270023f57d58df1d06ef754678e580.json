{"ast":null,"code":"import { connect } from \"react-redux\";\nimport { withFormik } from \"formik\";\nimport LoginForm from \"../components/LoginForm\";\nimport validateForm from \"utils/validate\";\nimport { userActions } from \"../../../redux/actions\"; /* не получается \"redux/actions\", ругается на пакет redux */\n\nconst LoginFormConnected = connect(state => state, userActions)(LoginForm);\nconst LoginFormContainer = withFormik({\n  mapPropsToValues: () => ({\n    email: \"\",\n    password: \"\"\n  }),\n  validate: values => {\n    let errors = {};\n    validateForm({\n      isAuth: true,\n      values,\n      errors\n    });\n    return errors;\n  },\n  handleSubmit: (values, {\n    setSubmitting,\n    fetchUserLogin\n  }) => {\n    console.log(fetchUserLogin);\n    return axios.post(\"/user/login\", values).then(({\n      data\n    }) => {\n      const {\n        status,\n        token\n      } = data;\n      if (status === \"error\") {\n        openNotification({\n          title: \"Ошибка при авторизации\",\n          text: \"Неверный логин или пароль.\",\n          type: \"error\"\n        });\n      } else {\n        openNotification({\n          title: \"Отлично!\",\n          text: \"Авторизация успешна.\",\n          type: \"success\"\n        });\n      }\n      setSubmitting(false);\n    }).catche(() => {\n      setSubmitting(false);\n    });\n  },\n  displayName: \"LoginForm\"\n})(LoginFormConnected);\nexport default LoginFormContainer;","map":{"version":3,"names":["connect","withFormik","LoginForm","validateForm","userActions","LoginFormConnected","state","LoginFormContainer","mapPropsToValues","email","password","validate","values","errors","isAuth","handleSubmit","setSubmitting","fetchUserLogin","console","log","axios","post","then","data","status","token","openNotification","title","text","type","catche","displayName"],"sources":["D:/React/projects/02-second-project/messanger-frontend/src/modules/LoginForm/containers/LoginForm.js"],"sourcesContent":["import { connect } from \"react-redux\";\r\nimport { withFormik } from \"formik\";\r\nimport LoginForm from \"../components/LoginForm\";\r\nimport validateForm from \"utils/validate\"\r\n\r\n\r\nimport {userActions} from \"../../../redux/actions\" /* не получается \"redux/actions\", ругается на пакет redux */\r\n\r\nconst LoginFormConnected = connect(state => state, userActions)(LoginForm)\r\n\r\nconst LoginFormContainer = withFormik({\r\n    mapPropsToValues: () => (\r\n        {\r\n            email: \"\",\r\n            password: \"\"\r\n        }),\r\n    validate: values => {\r\n        let errors = {}\r\n\r\n        validateForm({ isAuth: true, values, errors })\r\n\r\n        return errors\r\n    },\r\n    handleSubmit: (values, { setSubmitting, fetchUserLogin }) => {\r\n        console.log(fetchUserLogin)\r\n        return axios.post(\"/user/login\", values)\r\n            .then(({ data }) => {\r\n                const { status, token } = data\r\n                if (status === \"error\") {\r\n                    openNotification({\r\n                        title: \"Ошибка при авторизации\",\r\n                        text: \"Неверный логин или пароль.\",\r\n                        type: \"error\"\r\n                    })\r\n                } else {\r\n                    openNotification({\r\n                        title: \"Отлично!\",\r\n                        text: \"Авторизация успешна.\",\r\n                        type: \"success\"\r\n                    })\r\n                }\r\n                setSubmitting(false)\r\n            })\r\n            .catche(() => {\r\n                setSubmitting(false)\r\n            })\r\n    },\r\n    displayName: \"LoginForm\"\r\n\r\n})(LoginFormConnected);\r\n\r\nexport default LoginFormContainer"],"mappings":"AAAA,SAASA,OAAO,QAAQ,aAAa;AACrC,SAASC,UAAU,QAAQ,QAAQ;AACnC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,YAAY,MAAM,gBAAgB;AAGzC,SAAQC,WAAW,QAAO,wBAAwB,EAAC;;AAEnD,MAAMC,kBAAkB,GAAGL,OAAO,CAACM,KAAK,IAAIA,KAAK,EAAEF,WAAW,CAAC,CAACF,SAAS,CAAC;AAE1E,MAAMK,kBAAkB,GAAGN,UAAU,CAAC;EAClCO,gBAAgB,EAAEA,CAAA,MACd;IACIC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACd,CAAC,CAAC;EACNC,QAAQ,EAAEC,MAAM,IAAI;IAChB,IAAIC,MAAM,GAAG,CAAC,CAAC;IAEfV,YAAY,CAAC;MAAEW,MAAM,EAAE,IAAI;MAAEF,MAAM;MAAEC;IAAO,CAAC,CAAC;IAE9C,OAAOA,MAAM;EACjB,CAAC;EACDE,YAAY,EAAEA,CAACH,MAAM,EAAE;IAAEI,aAAa;IAAEC;EAAe,CAAC,KAAK;IACzDC,OAAO,CAACC,GAAG,CAACF,cAAc,CAAC;IAC3B,OAAOG,KAAK,CAACC,IAAI,CAAC,aAAa,EAAET,MAAM,CAAC,CACnCU,IAAI,CAAC,CAAC;MAAEC;IAAK,CAAC,KAAK;MAChB,MAAM;QAAEC,MAAM;QAAEC;MAAM,CAAC,GAAGF,IAAI;MAC9B,IAAIC,MAAM,KAAK,OAAO,EAAE;QACpBE,gBAAgB,CAAC;UACbC,KAAK,EAAE,wBAAwB;UAC/BC,IAAI,EAAE,4BAA4B;UAClCC,IAAI,EAAE;QACV,CAAC,CAAC;MACN,CAAC,MAAM;QACHH,gBAAgB,CAAC;UACbC,KAAK,EAAE,UAAU;UACjBC,IAAI,EAAE,sBAAsB;UAC5BC,IAAI,EAAE;QACV,CAAC,CAAC;MACN;MACAb,aAAa,CAAC,KAAK,CAAC;IACxB,CAAC,CAAC,CACDc,MAAM,CAAC,MAAM;MACVd,aAAa,CAAC,KAAK,CAAC;IACxB,CAAC,CAAC;EACV,CAAC;EACDe,WAAW,EAAE;AAEjB,CAAC,CAAC,CAAC1B,kBAAkB,CAAC;AAEtB,eAAeE,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}