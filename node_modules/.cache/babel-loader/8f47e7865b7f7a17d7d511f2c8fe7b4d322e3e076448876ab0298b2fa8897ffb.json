{"ast":null,"code":"import { messagesApi } from \"utils/api\";\nconst actions = {\n  setMessages: items => ({\n    type: \"MESSAGES:SET_ITEMS\",\n    payload: items\n  }),\n  addMessage: message => (dispatch, getState) => {\n    const {\n      dialogs\n    } = getState();\n    const {\n      currentDialogId\n    } = dialogs;\n    if (currentDialogId === message.dialog._id) {\n      dispatch({\n        type: \"MESSAGES:ADD_MESSAGE\",\n        payload: message\n      });\n    }\n  },\n  fetchSendMessage: (text, dialogId) => dispatch => {\n    messagesApi.send(text, dialogId);\n  },\n  setIsLoading: bool => ({\n    type: \"MESSAGES:SET_IS_LOADING\",\n    payload: bool\n  }),\n  removeMessageById: id = dispatch => ({\n    type: \"MESSAGES:SET_IS_LOADING\",\n    payload: bool\n  }),\n  fetchMessages: dialogId => dispatch => {\n    dispatch(actions.setIsLoading(true));\n    messagesApi.getAllByDialogId(dialogId).then(({\n      data\n    }) => {\n      dispatch(actions.setMessages(data));\n    }).catch(() => {\n      dispatch(actions.setIsLoading(false));\n    });\n  }\n};\nexport default actions;","map":{"version":3,"names":["messagesApi","actions","setMessages","items","type","payload","addMessage","message","dispatch","getState","dialogs","currentDialogId","dialog","_id","fetchSendMessage","text","dialogId","send","setIsLoading","bool","removeMessageById","id","fetchMessages","getAllByDialogId","then","data","catch"],"sources":["D:/React/projects/02-second-project/messanger-frontend/src/redux/actions/messages.js"],"sourcesContent":["import { messagesApi } from \"utils/api\";\r\n\r\nconst actions = {\r\n    setMessages: items => ({\r\n        type: \"MESSAGES:SET_ITEMS\",\r\n        payload: items\r\n    }),\r\n    addMessage: message => (dispatch, getState) => {\r\n        const { dialogs } = getState()\r\n        const { currentDialogId } = dialogs\r\n\r\n        if (currentDialogId === message.dialog._id) {\r\n            dispatch({\r\n                type: \"MESSAGES:ADD_MESSAGE\",\r\n                payload: message\r\n            })\r\n        }\r\n    },\r\n    fetchSendMessage: (text, dialogId) => (dispatch) => {\r\n        messagesApi.send(text, dialogId)\r\n    },\r\n    setIsLoading: (bool) => ({\r\n        type: \"MESSAGES:SET_IS_LOADING\",\r\n        payload: bool\r\n    }),\r\n    removeMessageById: (id) = dispatch => ({\r\n        type: \"MESSAGES:SET_IS_LOADING\",\r\n        payload: bool\r\n    }),\r\n    fetchMessages: (dialogId) => dispatch => {\r\n        dispatch(actions.setIsLoading(true))\r\n        messagesApi.getAllByDialogId(dialogId).then(({ data }) => {\r\n            dispatch(actions.setMessages(data))\r\n        }).catch(() => {\r\n            dispatch(actions.setIsLoading(false))\r\n        })\r\n    }\r\n}\r\n\r\nexport default actions"],"mappings":"AAAA,SAASA,WAAW,QAAQ,WAAW;AAEvC,MAAMC,OAAO,GAAG;EACZC,WAAW,EAAEC,KAAK,KAAK;IACnBC,IAAI,EAAE,oBAAoB;IAC1BC,OAAO,EAAEF;EACb,CAAC,CAAC;EACFG,UAAU,EAAEC,OAAO,IAAI,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC3C,MAAM;MAAEC;IAAQ,CAAC,GAAGD,QAAQ,CAAC,CAAC;IAC9B,MAAM;MAAEE;IAAgB,CAAC,GAAGD,OAAO;IAEnC,IAAIC,eAAe,KAAKJ,OAAO,CAACK,MAAM,CAACC,GAAG,EAAE;MACxCL,QAAQ,CAAC;QACLJ,IAAI,EAAE,sBAAsB;QAC5BC,OAAO,EAAEE;MACb,CAAC,CAAC;IACN;EACJ,CAAC;EACDO,gBAAgB,EAAEA,CAACC,IAAI,EAAEC,QAAQ,KAAMR,QAAQ,IAAK;IAChDR,WAAW,CAACiB,IAAI,CAACF,IAAI,EAAEC,QAAQ,CAAC;EACpC,CAAC;EACDE,YAAY,EAAGC,IAAI,KAAM;IACrBf,IAAI,EAAE,yBAAyB;IAC/BC,OAAO,EAAEc;EACb,CAAC,CAAC;EACFC,iBAAiB,EAAGC,EAAE,GAAIb,QAAQ,KAAK;IACnCJ,IAAI,EAAE,yBAAyB;IAC/BC,OAAO,EAAEc;EACb,CAAC,CAAC;EACFG,aAAa,EAAGN,QAAQ,IAAKR,QAAQ,IAAI;IACrCA,QAAQ,CAACP,OAAO,CAACiB,YAAY,CAAC,IAAI,CAAC,CAAC;IACpClB,WAAW,CAACuB,gBAAgB,CAACP,QAAQ,CAAC,CAACQ,IAAI,CAAC,CAAC;MAAEC;IAAK,CAAC,KAAK;MACtDjB,QAAQ,CAACP,OAAO,CAACC,WAAW,CAACuB,IAAI,CAAC,CAAC;IACvC,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM;MACXlB,QAAQ,CAACP,OAAO,CAACiB,YAAY,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC,CAAC;EACN;AACJ,CAAC;AAED,eAAejB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}